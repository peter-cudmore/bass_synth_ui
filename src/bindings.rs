/* automatically generated by rust-bindgen 0.69.1 */

pub const _STL_COMPILER_PREPROCESSOR: u32 = 1;
pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const NULL: u32 = 0;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_NODISCARD: u32 = 1;
pub const _HAS_CXX23: u32 = 0;
pub const _STL_WARNING_LEVEL: u32 = 3;
pub const _HAS_CONDITIONAL_EXPLICIT: u32 = 1;
pub const _STL_DISABLED_WARNING_C4984: u32 = 4984;
pub const _STL_DISABLED_WARNING_C5053: u32 = 5053;
pub const _CPPLIB_VER: u32 = 650;
pub const _MSVC_STL_VERSION: u32 = 142;
pub const _MSVC_STL_UPDATE: u32 = 202105;
pub const _HAS_STATIC_RTTI: u32 = 1;
pub const _HAS_STD_BYTE: u32 = 0;
pub const _ENFORCE_MATCHING_ALLOCATORS: u32 = 0;
pub const _ENFORCE_FACET_SPECIALIZATIONS: u32 = 0;
pub const _FACET_SPECIALIZATION_MESSAGE : & [u8 ; 183] = b"Unsupported facet specialization; see N4800 27.3.1.1.1 [locale.category]. Either use a Standard specialization or define _ENFORCE_FACET_SPECIALIZATIONS=0 to suppress this diagnostic.\0" ;
pub const _STL_OPTIMIZE_SYSTEM_ERROR_OPERATORS: u32 = 1;
pub const _STD_VECTORIZE_WITH_FLOAT_CONTROL: u32 = 1;
pub const __cpp_lib_chrono_udls: u32 = 201304;
pub const __cpp_lib_complex_udls: u32 = 201309;
pub const __cpp_lib_exchange_function: u32 = 201304;
pub const __cpp_lib_generic_associative_lookup: u32 = 201304;
pub const __cpp_lib_integer_sequence: u32 = 201304;
pub const __cpp_lib_integral_constant_callable: u32 = 201304;
pub const __cpp_lib_is_final: u32 = 201402;
pub const __cpp_lib_is_null_pointer: u32 = 201309;
pub const __cpp_lib_make_reverse_iterator: u32 = 201402;
pub const __cpp_lib_make_unique: u32 = 201304;
pub const __cpp_lib_null_iterators: u32 = 201304;
pub const __cpp_lib_quoted_string_io: u32 = 201304;
pub const __cpp_lib_result_of_sfinae: u32 = 201210;
pub const __cpp_lib_robust_nonmodifying_seq_ops: u32 = 201304;
pub const __cpp_lib_shared_timed_mutex: u32 = 201402;
pub const __cpp_lib_string_udls: u32 = 201304;
pub const __cpp_lib_transformation_trait_aliases: u32 = 201304;
pub const __cpp_lib_tuple_element_t: u32 = 201402;
pub const __cpp_lib_tuples_by_type: u32 = 201304;
pub const __cpp_lib_addressof_constexpr: u32 = 201603;
pub const __cpp_lib_allocator_traits_is_always_equal: u32 = 201411;
pub const __cpp_lib_as_const: u32 = 201510;
pub const __cpp_lib_bool_constant: u32 = 201505;
pub const __cpp_lib_enable_shared_from_this: u32 = 201603;
pub const __cpp_lib_incomplete_container_elements: u32 = 201505;
pub const __cpp_lib_invoke: u32 = 201411;
pub const __cpp_lib_logical_traits: u32 = 201510;
pub const __cpp_lib_map_try_emplace: u32 = 201411;
pub const __cpp_lib_nonmember_container_access: u32 = 201411;
pub const __cpp_lib_shared_mutex: u32 = 201505;
pub const __cpp_lib_transparent_operators: u32 = 201510;
pub const __cpp_lib_type_trait_variable_templates: u32 = 201510;
pub const __cpp_lib_uncaught_exceptions: u32 = 201411;
pub const __cpp_lib_unordered_map_try_emplace: u32 = 201411;
pub const __cpp_lib_void_t: u32 = 201411;
pub const __cpp_lib_atomic_value_initialization: u32 = 201911;
pub const __cpp_lib_chrono: u32 = 201510;
pub const __cpp_lib_shared_ptr_arrays: u32 = 201611;
pub const __cpp_lib_experimental_erase_if: u32 = 201411;
pub const __cpp_lib_experimental_filesystem: u32 = 201406;
pub const _STL_WIN32_WINNT_WINXP: u32 = 1281;
pub const _STL_WIN32_WINNT_VISTA: u32 = 1536;
pub const _STL_WIN32_WINNT_WIN8: u32 = 1538;
pub const _STL_WIN32_WINNT_WINBLUE: u32 = 1539;
pub const _STL_WIN32_WINNT_WIN10: u32 = 2560;
pub const _STL_WIN32_WINNT: u32 = 1536;
pub const WCHAR_MIN: u32 = 0;
pub const WCHAR_MAX: u32 = 65535;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 65535;
pub type va_list = *mut ::std::os::raw::c_char;
extern "C" {
    pub fn __va_start(arg1: *mut va_list, ...);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __vcrt_va_list_is_reference {
    pub _address: u8,
}
pub const __vcrt_va_list_is_reference___the_value: __vcrt_va_list_is_reference__bindgen_ty_1 =
    false;
pub type __vcrt_va_list_is_reference__bindgen_ty_1 = bool;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __vcrt_assert_va_start_is_not_reference {
    pub _address: u8,
}
pub type __vcrt_bool = bool;
extern "C" {
    pub fn __security_init_cookie();
}
extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize) -> !;
}
extern "C" {
    pub static mut __security_cookie: usize;
}
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_longlong;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulonglong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_int;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type int_fast64_t = ::std::os::raw::c_longlong;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_uint;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NoteOnOffEvent {
    pub note: u8,
    pub vel: u8,
}
#[test]
fn bindgen_test_layout_NoteOnOffEvent() {
    const UNINIT: ::std::mem::MaybeUninit<NoteOnOffEvent> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<NoteOnOffEvent>(),
        2usize,
        concat!("Size of: ", stringify!(NoteOnOffEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<NoteOnOffEvent>(),
        1usize,
        concat!("Alignment of ", stringify!(NoteOnOffEvent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).note) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NoteOnOffEvent),
            "::",
            stringify!(note)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vel) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(NoteOnOffEvent),
            "::",
            stringify!(vel)
        )
    );
}
pub const WaveformEnum_SAW: WaveformEnum = 0;
pub const WaveformEnum_SQR: WaveformEnum = 1;
pub const WaveformEnum_SIN: WaveformEnum = 2;
pub type WaveformEnum = u8;
pub const FilterModeEnum_HP: FilterModeEnum = 0;
pub const FilterModeEnum_LP: FilterModeEnum = 1;
pub type FilterModeEnum = u8;
pub const Section_Global: Section = 0;
pub const Section_Osc1: Section = 1;
pub const Section_Osc2: Section = 2;
pub const Section_Osc3: Section = 3;
pub const Section_Filter: Section = 4;
pub const Section_Amp: Section = 5;
pub const Section_N_SECTIONS: Section = 6;
pub type Section = u8;
pub const Scale_SCALE_STEP: Scale = 0;
pub const Scale_SCALE_Lin: Scale = 1;
pub const Scale_SCALE_FreqExp: Scale = 2;
pub const Scale_SCALE_DB: Scale = 3;
pub const Scale_SCALE_PCT: Scale = 4;
pub const Scale_SCALE_LogTime: Scale = 5;
pub type Scale = ::std::os::raw::c_int;
pub const ParameterType_Waveform: ParameterType = 0;
pub const ParameterType_Coarse: ParameterType = 1;
pub const ParameterType_Mode: ParameterType = 2;
pub const ParameterType_Cutoff: ParameterType = 3;
pub const ParameterType_Fine: ParameterType = 4;
pub const ParameterType_Frequency: ParameterType = 5;
pub const ParameterType_Resonance: ParameterType = 6;
pub const ParameterType_Emphasis: ParameterType = 7;
pub const ParameterType_Mix: ParameterType = 8;
pub const ParameterType_Gain: ParameterType = 9;
pub const ParameterType_NoteEvents: ParameterType = 10;
pub const ParameterType_Attack: ParameterType = 11;
pub const ParameterType_Decay: ParameterType = 12;
pub const ParameterType_Sustain: ParameterType = 13;
pub const ParameterType_Release: ParameterType = 14;
pub type ParameterType = u8;
#[repr(C)]
#[derive(Copy, Clone)]
pub union ParameterValue {
    pub time: f32,
    pub freq: f32,
    pub pct: f32,
    pub gain: u8,
    pub value_uint8_t: u8,
    pub value_float: f32,
    pub value_int8_t: i8,
    pub value_WaveformEnum: WaveformEnum,
    pub value_FilterModeEnum: FilterModeEnum,
    pub noteEvent: NoteOnOffEvent,
}
#[test]
fn bindgen_test_layout_ParameterValue() {
    const UNINIT: ::std::mem::MaybeUninit<ParameterValue> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ParameterValue>(),
        4usize,
        concat!("Size of: ", stringify!(ParameterValue))
    );
    assert_eq!(
        ::std::mem::align_of::<ParameterValue>(),
        4usize,
        concat!("Alignment of ", stringify!(ParameterValue))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ParameterValue),
            "::",
            stringify!(time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).freq) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ParameterValue),
            "::",
            stringify!(freq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pct) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ParameterValue),
            "::",
            stringify!(pct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gain) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ParameterValue),
            "::",
            stringify!(gain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value_uint8_t) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ParameterValue),
            "::",
            stringify!(value_uint8_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value_float) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ParameterValue),
            "::",
            stringify!(value_float)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value_int8_t) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ParameterValue),
            "::",
            stringify!(value_int8_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value_WaveformEnum) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ParameterValue),
            "::",
            stringify!(value_WaveformEnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value_FilterModeEnum) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ParameterValue),
            "::",
            stringify!(value_FilterModeEnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).noteEvent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ParameterValue),
            "::",
            stringify!(noteEvent)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SynthMessage {
    pub destination: Section,
    pub parameter: ParameterType,
    pub channel: u8,
    pub value: ParameterValue,
}
#[test]
fn bindgen_test_layout_SynthMessage() {
    const UNINIT: ::std::mem::MaybeUninit<SynthMessage> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SynthMessage>(),
        8usize,
        concat!("Size of: ", stringify!(SynthMessage))
    );
    assert_eq!(
        ::std::mem::align_of::<SynthMessage>(),
        4usize,
        concat!("Alignment of ", stringify!(SynthMessage))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).destination) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SynthMessage),
            "::",
            stringify!(destination)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parameter) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(SynthMessage),
            "::",
            stringify!(parameter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channel) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(SynthMessage),
            "::",
            stringify!(channel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SynthMessage),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Patch {
    pub Osc1_Waveform: WaveformEnum,
    pub Osc2_Waveform: WaveformEnum,
    pub Osc3_Waveform: WaveformEnum,
    pub Filter_Mode: FilterModeEnum,
    pub Osc1_Coarse: i8,
    pub Osc1_Fine: i8,
    pub Osc1_Gain: i8,
    pub Osc2_Coarse: i8,
    pub Osc2_Fine: i8,
    pub Osc2_Gain: i8,
    pub Osc3_Coarse: i8,
    pub Osc3_Fine: i8,
    pub Osc3_Gain: i8,
    pub Filter_Resonance: u8,
    pub Amp_Gain: i8,
    pub Filter_Cutoff: f32,
    pub Filter_Attack: f32,
    pub Filter_Decay: f32,
    pub Filter_Sustain: f32,
    pub Filter_Release: f32,
    pub Filter_Emphasis: f32,
    pub Amp_Attack: f32,
    pub Amp_Decay: f32,
    pub Amp_Sustain: f32,
    pub Amp_Release: f32,
}
#[test]
fn bindgen_test_layout_Patch() {
    const UNINIT: ::std::mem::MaybeUninit<Patch> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Patch>(),
        56usize,
        concat!("Size of: ", stringify!(Patch))
    );
    assert_eq!(
        ::std::mem::align_of::<Patch>(),
        4usize,
        concat!("Alignment of ", stringify!(Patch))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Osc1_Waveform) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Patch),
            "::",
            stringify!(Osc1_Waveform)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Osc2_Waveform) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(Patch),
            "::",
            stringify!(Osc2_Waveform)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Osc3_Waveform) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(Patch),
            "::",
            stringify!(Osc3_Waveform)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Filter_Mode) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(Patch),
            "::",
            stringify!(Filter_Mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Osc1_Coarse) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Patch),
            "::",
            stringify!(Osc1_Coarse)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Osc1_Fine) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(Patch),
            "::",
            stringify!(Osc1_Fine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Osc1_Gain) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(Patch),
            "::",
            stringify!(Osc1_Gain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Osc2_Coarse) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(Patch),
            "::",
            stringify!(Osc2_Coarse)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Osc2_Fine) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Patch),
            "::",
            stringify!(Osc2_Fine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Osc2_Gain) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(Patch),
            "::",
            stringify!(Osc2_Gain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Osc3_Coarse) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(Patch),
            "::",
            stringify!(Osc3_Coarse)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Osc3_Fine) as usize - ptr as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(Patch),
            "::",
            stringify!(Osc3_Fine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Osc3_Gain) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Patch),
            "::",
            stringify!(Osc3_Gain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Filter_Resonance) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(Patch),
            "::",
            stringify!(Filter_Resonance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Amp_Gain) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(Patch),
            "::",
            stringify!(Amp_Gain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Filter_Cutoff) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Patch),
            "::",
            stringify!(Filter_Cutoff)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Filter_Attack) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(Patch),
            "::",
            stringify!(Filter_Attack)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Filter_Decay) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Patch),
            "::",
            stringify!(Filter_Decay)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Filter_Sustain) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(Patch),
            "::",
            stringify!(Filter_Sustain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Filter_Release) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Patch),
            "::",
            stringify!(Filter_Release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Filter_Emphasis) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(Patch),
            "::",
            stringify!(Filter_Emphasis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Amp_Attack) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Patch),
            "::",
            stringify!(Amp_Attack)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Amp_Decay) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(Patch),
            "::",
            stringify!(Amp_Decay)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Amp_Sustain) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Patch),
            "::",
            stringify!(Amp_Sustain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Amp_Release) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(Patch),
            "::",
            stringify!(Amp_Release)
        )
    );
}
