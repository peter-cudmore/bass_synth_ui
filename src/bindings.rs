/* automatically generated by rust-bindgen 0.70.0 */

pub const _STL_COMPILER_PREPROCESSOR: u32 = 1;
pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const NULL: u32 = 0;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_CXX23: u32 = 0;
pub const _HAS_NODISCARD: u32 = 1;
pub const _STL_WARNING_LEVEL: u32 = 3;
pub const _STL_DISABLED_WARNING_C4984: u32 = 4984;
pub const _STL_DISABLED_WARNING_C5053: u32 = 5053;
pub const _CPPLIB_VER: u32 = 650;
pub const _MSVC_STL_VERSION: u32 = 143;
pub const _MSVC_STL_UPDATE: u32 = 202405;
pub const _HAS_STATIC_RTTI: u32 = 1;
pub const _HAS_STD_BYTE: u32 = 0;
pub const _ENFORCE_MATCHING_ALLOCATORS: u32 = 0;
pub const _ENFORCE_FACET_SPECIALIZATIONS: u32 = 0;
pub const _FACET_SPECIALIZATION_MESSAGE : & [u8 ; 167] = b"Unsupported facet specialization; see N4950 [locale.category]. Either use a Standard specialization or define _ENFORCE_FACET_SPECIALIZATIONS=0 to suppress this error.\0" ;
pub const _STL_OPTIMIZE_SYSTEM_ERROR_OPERATORS: u32 = 1;
pub const _STD_VECTORIZE_WITH_FLOAT_CONTROL: u32 = 1;
pub const __cpp_lib_chrono_udls: u32 = 201304;
pub const __cpp_lib_complex_udls: u32 = 201309;
pub const __cpp_lib_exchange_function: u32 = 201304;
pub const __cpp_lib_freestanding_char_traits: u32 = 202306;
pub const __cpp_lib_freestanding_cstdlib: u32 = 202306;
pub const __cpp_lib_freestanding_cstring: u32 = 202311;
pub const __cpp_lib_freestanding_cwchar: u32 = 202306;
pub const __cpp_lib_freestanding_errc: u32 = 202306;
pub const __cpp_lib_freestanding_feature_test_macros: u32 = 202306;
pub const __cpp_lib_freestanding_functional: u32 = 202306;
pub const __cpp_lib_freestanding_iterator: u32 = 202306;
pub const __cpp_lib_freestanding_memory: u32 = 202306;
pub const __cpp_lib_freestanding_operator_new: u32 = 202306;
pub const __cpp_lib_freestanding_ratio: u32 = 202306;
pub const __cpp_lib_freestanding_tuple: u32 = 202306;
pub const __cpp_lib_freestanding_utility: u32 = 202306;
pub const __cpp_lib_generic_associative_lookup: u32 = 201304;
pub const __cpp_lib_integer_sequence: u32 = 201304;
pub const __cpp_lib_integral_constant_callable: u32 = 201304;
pub const __cpp_lib_is_final: u32 = 201402;
pub const __cpp_lib_is_null_pointer: u32 = 201309;
pub const __cpp_lib_make_reverse_iterator: u32 = 201402;
pub const __cpp_lib_make_unique: u32 = 201304;
pub const __cpp_lib_null_iterators: u32 = 201304;
pub const __cpp_lib_quoted_string_io: u32 = 201304;
pub const __cpp_lib_result_of_sfinae: u32 = 201210;
pub const __cpp_lib_robust_nonmodifying_seq_ops: u32 = 201304;
pub const __cpp_lib_shared_timed_mutex: u32 = 201402;
pub const __cpp_lib_string_udls: u32 = 201304;
pub const __cpp_lib_transformation_trait_aliases: u32 = 201304;
pub const __cpp_lib_tuple_element_t: u32 = 201402;
pub const __cpp_lib_tuples_by_type: u32 = 201304;
pub const __cpp_lib_addressof_constexpr: u32 = 201603;
pub const __cpp_lib_allocator_traits_is_always_equal: u32 = 201411;
pub const __cpp_lib_as_const: u32 = 201510;
pub const __cpp_lib_bool_constant: u32 = 201505;
pub const __cpp_lib_enable_shared_from_this: u32 = 201603;
pub const __cpp_lib_incomplete_container_elements: u32 = 201505;
pub const __cpp_lib_invoke: u32 = 201411;
pub const __cpp_lib_logical_traits: u32 = 201510;
pub const __cpp_lib_map_try_emplace: u32 = 201411;
pub const __cpp_lib_nonmember_container_access: u32 = 201411;
pub const __cpp_lib_shared_mutex: u32 = 201505;
pub const __cpp_lib_transparent_operators: u32 = 201510;
pub const __cpp_lib_type_trait_variable_templates: u32 = 201510;
pub const __cpp_lib_uncaught_exceptions: u32 = 201411;
pub const __cpp_lib_unordered_map_try_emplace: u32 = 201411;
pub const __cpp_lib_void_t: u32 = 201411;
pub const __cpp_lib_atomic_value_initialization: u32 = 201911;
pub const __cpp_lib_chrono: u32 = 201510;
pub const __cpp_lib_shared_ptr_arrays: u32 = 201611;
pub const __cpp_lib_experimental_filesystem: u32 = 201406;
pub const _USE_EXTERN_CXX_EVERYWHERE_FOR_STL: u32 = 0;
pub const _STL_WIN32_WINNT_VISTA: u32 = 1536;
pub const _STL_WIN32_WINNT_WIN7: u32 = 1537;
pub const _STL_WIN32_WINNT_WIN8: u32 = 1538;
pub const _STL_WIN32_WINNT_WINBLUE: u32 = 1539;
pub const _STL_WIN32_WINNT_WIN10: u32 = 2560;
pub const _STL_WIN32_WINNT: u32 = 1537;
pub const WCHAR_MIN: u32 = 0;
pub const WCHAR_MAX: u32 = 65535;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 65535;
pub type va_list = *mut ::std::os::raw::c_char;
extern "C" {
    pub fn __va_start(arg1: *mut va_list, ...);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __vcrt_va_list_is_reference {
    pub _address: u8,
}
pub const __vcrt_va_list_is_reference___the_value: __vcrt_va_list_is_reference__bindgen_ty_1 =
    false;
pub type __vcrt_va_list_is_reference__bindgen_ty_1 = bool;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __vcrt_assert_va_start_is_not_reference {
    pub _address: u8,
}
pub type __vcrt_bool = bool;
extern "C" {
    pub fn __security_init_cookie();
}
extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize) -> !;
}
extern "C" {
    pub static mut __security_cookie: usize;
}
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_longlong;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulonglong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_int;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type int_fast64_t = ::std::os::raw::c_longlong;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_uint;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NoteOnOffEvent {
    pub note: u8,
    pub vel: u8,
}
const _: () = {
    ["Size of NoteOnOffEvent"][::std::mem::size_of::<NoteOnOffEvent>() - 2usize];
    ["Alignment of NoteOnOffEvent"][::std::mem::align_of::<NoteOnOffEvent>() - 1usize];
    ["Offset of field: NoteOnOffEvent::note"]
        [::std::mem::offset_of!(NoteOnOffEvent, note) - 0usize];
    ["Offset of field: NoteOnOffEvent::vel"][::std::mem::offset_of!(NoteOnOffEvent, vel) - 1usize];
};
pub const WaveformEnum_SAW: WaveformEnum = 0;
pub const WaveformEnum_SQR: WaveformEnum = 1;
pub const WaveformEnum_SIN: WaveformEnum = 2;
pub type WaveformEnum = u8;
pub const FilterModeEnum_HP: FilterModeEnum = 0;
pub const FilterModeEnum_LP: FilterModeEnum = 1;
pub type FilterModeEnum = u8;
pub const Section_Global: Section = 0;
pub const Section_Osc1: Section = 1;
pub const Section_Osc2: Section = 2;
pub const Section_Osc3: Section = 3;
pub const Section_Filter: Section = 4;
pub const Section_Amp: Section = 5;
pub const Section_N_SECTIONS: Section = 6;
pub type Section = u8;
pub const Scale_SCALE_STEP: Scale = 0;
pub const Scale_SCALE_Lin: Scale = 1;
pub const Scale_SCALE_FreqExp: Scale = 2;
pub const Scale_SCALE_DB: Scale = 3;
pub const Scale_SCALE_PCT: Scale = 4;
pub const Scale_SCALE_LogTime: Scale = 5;
pub type Scale = ::std::os::raw::c_int;
pub const ParameterType_Waveform: ParameterType = 0;
pub const ParameterType_Coarse: ParameterType = 1;
pub const ParameterType_Mode: ParameterType = 2;
pub const ParameterType_Cutoff: ParameterType = 3;
pub const ParameterType_Fine: ParameterType = 4;
pub const ParameterType_Frequency: ParameterType = 5;
pub const ParameterType_Resonance: ParameterType = 6;
pub const ParameterType_Emphasis: ParameterType = 7;
pub const ParameterType_Mix: ParameterType = 8;
pub const ParameterType_Gain: ParameterType = 9;
pub const ParameterType_NoteEvents: ParameterType = 10;
pub const ParameterType_Attack: ParameterType = 11;
pub const ParameterType_Decay: ParameterType = 12;
pub const ParameterType_Sustain: ParameterType = 13;
pub const ParameterType_Release: ParameterType = 14;
pub type ParameterType = u8;
#[repr(C)]
#[derive(Copy, Clone)]
pub union ParameterValue {
    pub time: f32,
    pub freq: f32,
    pub pct: f32,
    pub gain: u8,
    pub value_uint8_t: u8,
    pub value_float: f32,
    pub value_int8_t: i8,
    pub value_WaveformEnum: WaveformEnum,
    pub value_FilterModeEnum: FilterModeEnum,
    pub noteEvent: NoteOnOffEvent,
}
const _: () = {
    ["Size of ParameterValue"][::std::mem::size_of::<ParameterValue>() - 4usize];
    ["Alignment of ParameterValue"][::std::mem::align_of::<ParameterValue>() - 4usize];
    ["Offset of field: ParameterValue::time"]
        [::std::mem::offset_of!(ParameterValue, time) - 0usize];
    ["Offset of field: ParameterValue::freq"]
        [::std::mem::offset_of!(ParameterValue, freq) - 0usize];
    ["Offset of field: ParameterValue::pct"][::std::mem::offset_of!(ParameterValue, pct) - 0usize];
    ["Offset of field: ParameterValue::gain"]
        [::std::mem::offset_of!(ParameterValue, gain) - 0usize];
    ["Offset of field: ParameterValue::value_uint8_t"]
        [::std::mem::offset_of!(ParameterValue, value_uint8_t) - 0usize];
    ["Offset of field: ParameterValue::value_float"]
        [::std::mem::offset_of!(ParameterValue, value_float) - 0usize];
    ["Offset of field: ParameterValue::value_int8_t"]
        [::std::mem::offset_of!(ParameterValue, value_int8_t) - 0usize];
    ["Offset of field: ParameterValue::value_WaveformEnum"]
        [::std::mem::offset_of!(ParameterValue, value_WaveformEnum) - 0usize];
    ["Offset of field: ParameterValue::value_FilterModeEnum"]
        [::std::mem::offset_of!(ParameterValue, value_FilterModeEnum) - 0usize];
    ["Offset of field: ParameterValue::noteEvent"]
        [::std::mem::offset_of!(ParameterValue, noteEvent) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SynthMessage {
    pub destination: Section,
    pub parameter: ParameterType,
    pub channel: u8,
    pub value: ParameterValue,
}
const _: () = {
    ["Size of SynthMessage"][::std::mem::size_of::<SynthMessage>() - 8usize];
    ["Alignment of SynthMessage"][::std::mem::align_of::<SynthMessage>() - 4usize];
    ["Offset of field: SynthMessage::destination"]
        [::std::mem::offset_of!(SynthMessage, destination) - 0usize];
    ["Offset of field: SynthMessage::parameter"]
        [::std::mem::offset_of!(SynthMessage, parameter) - 1usize];
    ["Offset of field: SynthMessage::channel"]
        [::std::mem::offset_of!(SynthMessage, channel) - 2usize];
    ["Offset of field: SynthMessage::value"][::std::mem::offset_of!(SynthMessage, value) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Patch {
    pub Osc1_Waveform: WaveformEnum,
    pub Osc2_Waveform: WaveformEnum,
    pub Osc3_Waveform: WaveformEnum,
    pub Filter_Mode: FilterModeEnum,
    pub Osc1_Coarse: i8,
    pub Osc1_Fine: i8,
    pub Osc1_Gain: i8,
    pub Osc2_Coarse: i8,
    pub Osc2_Fine: i8,
    pub Osc2_Gain: i8,
    pub Osc3_Coarse: i8,
    pub Osc3_Fine: i8,
    pub Osc3_Gain: i8,
    pub Filter_Resonance: u8,
    pub Amp_Gain: i8,
    pub Filter_Cutoff: f32,
    pub Filter_Attack: f32,
    pub Filter_Decay: f32,
    pub Filter_Sustain: f32,
    pub Filter_Release: f32,
    pub Filter_Emphasis: f32,
    pub Amp_Attack: f32,
    pub Amp_Decay: f32,
    pub Amp_Sustain: f32,
    pub Amp_Release: f32,
}
const _: () = {
    ["Size of Patch"][::std::mem::size_of::<Patch>() - 56usize];
    ["Alignment of Patch"][::std::mem::align_of::<Patch>() - 4usize];
    ["Offset of field: Patch::Osc1_Waveform"]
        [::std::mem::offset_of!(Patch, Osc1_Waveform) - 0usize];
    ["Offset of field: Patch::Osc2_Waveform"]
        [::std::mem::offset_of!(Patch, Osc2_Waveform) - 1usize];
    ["Offset of field: Patch::Osc3_Waveform"]
        [::std::mem::offset_of!(Patch, Osc3_Waveform) - 2usize];
    ["Offset of field: Patch::Filter_Mode"][::std::mem::offset_of!(Patch, Filter_Mode) - 3usize];
    ["Offset of field: Patch::Osc1_Coarse"][::std::mem::offset_of!(Patch, Osc1_Coarse) - 4usize];
    ["Offset of field: Patch::Osc1_Fine"][::std::mem::offset_of!(Patch, Osc1_Fine) - 5usize];
    ["Offset of field: Patch::Osc1_Gain"][::std::mem::offset_of!(Patch, Osc1_Gain) - 6usize];
    ["Offset of field: Patch::Osc2_Coarse"][::std::mem::offset_of!(Patch, Osc2_Coarse) - 7usize];
    ["Offset of field: Patch::Osc2_Fine"][::std::mem::offset_of!(Patch, Osc2_Fine) - 8usize];
    ["Offset of field: Patch::Osc2_Gain"][::std::mem::offset_of!(Patch, Osc2_Gain) - 9usize];
    ["Offset of field: Patch::Osc3_Coarse"][::std::mem::offset_of!(Patch, Osc3_Coarse) - 10usize];
    ["Offset of field: Patch::Osc3_Fine"][::std::mem::offset_of!(Patch, Osc3_Fine) - 11usize];
    ["Offset of field: Patch::Osc3_Gain"][::std::mem::offset_of!(Patch, Osc3_Gain) - 12usize];
    ["Offset of field: Patch::Filter_Resonance"]
        [::std::mem::offset_of!(Patch, Filter_Resonance) - 13usize];
    ["Offset of field: Patch::Amp_Gain"][::std::mem::offset_of!(Patch, Amp_Gain) - 14usize];
    ["Offset of field: Patch::Filter_Cutoff"]
        [::std::mem::offset_of!(Patch, Filter_Cutoff) - 16usize];
    ["Offset of field: Patch::Filter_Attack"]
        [::std::mem::offset_of!(Patch, Filter_Attack) - 20usize];
    ["Offset of field: Patch::Filter_Decay"][::std::mem::offset_of!(Patch, Filter_Decay) - 24usize];
    ["Offset of field: Patch::Filter_Sustain"]
        [::std::mem::offset_of!(Patch, Filter_Sustain) - 28usize];
    ["Offset of field: Patch::Filter_Release"]
        [::std::mem::offset_of!(Patch, Filter_Release) - 32usize];
    ["Offset of field: Patch::Filter_Emphasis"]
        [::std::mem::offset_of!(Patch, Filter_Emphasis) - 36usize];
    ["Offset of field: Patch::Amp_Attack"][::std::mem::offset_of!(Patch, Amp_Attack) - 40usize];
    ["Offset of field: Patch::Amp_Decay"][::std::mem::offset_of!(Patch, Amp_Decay) - 44usize];
    ["Offset of field: Patch::Amp_Sustain"][::std::mem::offset_of!(Patch, Amp_Sustain) - 48usize];
    ["Offset of field: Patch::Amp_Release"][::std::mem::offset_of!(Patch, Amp_Release) - 52usize];
};
